name: Version Bump & Commit Summary on Merge to Main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version bump and latest tag
        id: version_bump
        uses: actions/github-script@v6
        with:
          script: |
            const commits = context.payload.commits;
            let featureDetected = false;
            let hotfixDetected = false;

            for (const commit of commits) {
              const msg = commit.message.toLowerCase();
              if (msg.includes("feature/")) featureDetected = true;
              if (msg.includes("hotfix/")) hotfixDetected = true;
            }

            console.log("featureDetected:", featureDetected, "hotfixDetected:", hotfixDetected);
            if (!featureDetected && !hotfixDetected) {
              console.log("Nenhuma alteração de feature ou hotfix detectada. Encerrando.");
              return;
            }

            // Obtém a lista de tags
            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            if (tags.data.length === 0) {
              throw new Error("Nenhum tag encontrado no repositório.");
            }

            const latestTag = tags.data[0].name;
            console.log("Última tag:", latestTag);

            // Valida formato semver
            const semverRegex = /^v?(\d+)\.(\d+)\.(\d+)$/;
            const match = latestTag.match(semverRegex);
            if (!match) {
              throw new Error("O último tag não segue o formato semver: " + latestTag);
            }

            const major = parseInt(match[1]);
            const minor = parseInt(match[2]);
            const patch = parseInt(match[3]);

            let newVersion;
            if (featureDetected) {
              newVersion = `v${major}.${minor + 1}.0`;
            } else if (hotfixDetected) {
              newVersion = `v${major}.${minor}.${patch + 1}`;
            }

            console.log("Nova versão:", newVersion);

            core.setOutput("new_version", newVersion);
            core.setOutput("latest_tag", latestTag);

      - name: Generate commit summary using git log
        id: commit_summary
        run: |
          LATEST_TAG="${{ steps.version_bump.outputs.latest_tag }}"
          echo "Última tag: $LATEST_TAG"
          COMMIT_LOG=$(git log "$LATEST_TAG"..HEAD --pretty=format:"%s")
          echo "Commit log:"
          echo "$COMMIT_LOG"
          if [ -z "$COMMIT_LOG" ]; then
            SUMMARY="Nenhum commit relevante identificado."
          else
            SUMMARY=$(echo "$COMMIT_LOG" | tr '\n' ' ') # Remove quebras de linha para evitar erro no env
          fi
          echo "commit_summary=$SUMMARY" >> $GITHUB_ENV

      - name: Create new tag and release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = process.env.NEW_VERSION || '${{ steps.version_bump.outputs.new_version }}';
            if (!newVersion) {
              console.log("Nenhuma alteração de versão detectada. Encerrando.");
              return;
            }

            const sha = context.payload.after;
            console.log("Criando tag", newVersion, "no commit", sha);

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${newVersion}`,
              sha: sha
            });

            console.log("Tag criada com sucesso.");

            const commitSummary = process.env.COMMIT_SUMMARY || '${{ steps.commit_summary.outputs.commit_summary }}';
            const releaseBody = `Release ${newVersion} gerada a partir do merge na branch main.\n\n${commitSummary}`;

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newVersion,
              name: newVersion,
              body: releaseBody,
              draft: false,
              prerelease: false
            });

            console.log("Release criada com sucesso.");
            core.setOutput("release_id", release.data.id);
            
      - name: Atualizar Issue Mensal de Releases
        id: update_monthly_issue
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const newVersion = process.env.NEW_VERSION;
            if (!newVersion) {
              console.log("Nenhuma alteração de versão detectada. Encerrando.");
              return;
            }

            const now = new Date();
            const mesAtual = now.toLocaleString('pt-BR', { month: 'long' });
            const anoAtual = now.getFullYear();
            const issueTitle = `${mesAtual.charAt(0).toUpperCase() + mesAtual.slice(1)} ${anoAtual}`;

            // Verifica se a Issue do mês já existe
            const existingIssues = await github.rest.issues.listForRepo({
              owner: owner,
              repo: repo,
              state: "open",
              labels: "release-summary",
              per_page: 100
            });

            let issueNumber = null;
            let existingBody = "";
            
            for (const issue of existingIssues.data) {
              if (issue.title === issueTitle) {
                issueNumber = issue.number;
                existingBody = issue.body || "";
                break;
              }
            }

            // Obtém o último PR mergeado
            const latestMergePRs = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              state: "closed",
              base: "main",
              per_page: 10
            });

            const mergedPR = latestMergePRs.data.find(pr => pr.merged_at);
            if (!mergedPR) {
              console.log("Nenhum PR mergeado encontrado.");
              return;
            }

            const prNumber = mergedPR.number;
            const prTitle = mergedPR.title;
            const prUrl = mergedPR.html_url;

            // Obtém commits do PR
            const commitList = await github.rest.pulls.listCommits({
              owner: owner,
              repo: repo,
              pull_number: prNumber
            });

            const commitMessages = commitList.data.map(commit => `- ${commit.commit.message}`).join("\n");

            const newEntry = `
            ### ${newVersion}
            **Merge #${prNumber}** - [${prTitle}](${prUrl})
            ${commitMessages}
            `;

            let newIssueBody = existingBody + newEntry;

            if (issueNumber) {
              await github.rest.issues.update({
                owner: owner,
                repo: repo,
                issue_number: issueNumber,
                body: newIssueBody
              });
            } else {
              await github.rest.issues.create({
                owner: owner,
                repo: repo,
                title: issueTitle,
                body: newEntry,
                labels: ["release-summary"]
              });
            }

      - name: Deploy para produção (Fake)
        run: |
          VERSION="${{ steps.version_bump.outputs.new_version }}"
          echo "Iniciando deploy da versão $VERSION para produção..."
          sleep 5
          echo "Deploy concluído com sucesso!"
